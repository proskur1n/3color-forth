import networkx as nx
from pulp import *
import matplotlib.pyplot as plt
from matplotlib.widgets import Button
from sys import argv
import random
import itertools
import time
import math

def coloring(g):
    p = LpProblem("3color")
    nodes = [LpVariable(f"n_{n}", lowBound=0, upBound=2, cat=LpInteger) for n in g.nodes]
    for u, v in g.edges:
        # |v - u| >= 1   <=>   v != u
        b = LpVariable(f"b_{u}_{v}", cat=LpBinary)
        p += nodes[v] - nodes[u] + 1 <= 3 * (1 - b)
        p += nodes[u] - nodes[v] + 1 <= 3 * b
    status = p.solve(PULP_CBC_CMD(msg=False))
    if status == LpStatusInfeasible:
        return None
    elif status == LpStatusOptimal:
        colors = ["red", "green", "blue"]
        return [colors[int(n.valueOrDefault())] for n in nodes]
    else:
        assert False, f"Something went wrong, unknown status {status}"

def get_save_path(g, i):
    p = f"graphs/random_{len(g.nodes)}_{len(g.edges)}"
    if i != 0:
        p += "_" + str(i)
    return p + ".dimacs"

def save(g, colors):
    date = time.strftime("%Y-%m-%d %H:%M:%S")
    i = 0
    try:
        path = get_save_path(g, i)
        with open(path, "x") as file:
            file.write(f"c generated by generate.py on {date}\n")
            file.write(f"c {"positive" if colors != None else "negative"} instance\n")
            file.write(f"p edge {len(g.nodes)} {len(g.edges)}\n")
            for u, v in g.edges:
                file.write(f"e {u} {v}\n")
            print("Saved as", path)
    except FileExistsError:
        i += 1

num_nodes = random.randint(15, 70) if len(argv) < 2 else argv[1]
num_edges = random.randint(int(0.9*num_nodes), int(4*num_nodes)) if len(argv) < 3 else argv[2]
edge_probability = num_edges / math.comb(num_nodes, 2)
g = nx.erdos_renyi_graph(num_nodes, edge_probability)

# for n in g.nodes:
#     if len(list(g.neighbors(n))) == 0:
#         while True:
#             n2 = random.choice(list(g.nodes))
#             if n != n2:
#                 g.add_edge(n, n2)
#                 break

print(f"Checking if graph with {len(g.nodes)} nodes and {len(g.edges)} edges is 3-colorable.")
print("This may take some time ... ", end="", flush=True)
start = time.time()
colors = coloring(g)
duration = time.time() - start
print("Positive" if colors != None else "Negative")
print(f"It took {round(duration, 2)} seconds.")

nx.draw(g, with_labels=True, node_color=colors if colors != None else "grey")
button = Button(plt.axes([0.05, 0.9, 0.2, 0.075]), "Save")
button.on_clicked(lambda _: save(g, colors))
plt.show()
